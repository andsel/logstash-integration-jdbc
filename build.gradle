import java.nio.file.Files
import org.tmatesoft.svn.core.SVNDepth
import org.tmatesoft.svn.core.SVNURL
import org.tmatesoft.svn.core.wc.SVNClientManager
import org.tmatesoft.svn.core.wc.SVNRevision
import org.tmatesoft.svn.core.wc.SVNUpdateClient

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'

def DERBY_VERSION = '10.14.1.0'
def DERBY_MINOR = '10.15'

buildscript {
    ext {
        svnkitVersion = '1.10.11'
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.tmatesoft.svnkit:svnkit:${svnkitVersion}"
    }
}

class SvnCheckout extends DefaultTask {

    @Input
    String svnRef = 'https://svn.apache.org/repos/asf/db/derby/code/branches/'

    @Input
    String branch = '10.16'

    @OutputDirectory
    File getCheckoutDir() {
        return project.layout.buildDirectory.dir(branch).get().asFile
    }

    SvnCheckout() {
        description = "Checkout a branch from svnRef"
        group = "org.logstash.tooling"
    }

    @TaskAction
    def checkout() {
        SVNClientManager clientManager = SVNClientManager.newInstance();
        SVNUpdateClient client = clientManager.getUpdateClient();
        SVNURL svnurl = SVNURL.parseURIEncoded(svnRef + branch);

        println "Starting checkout"
        long revision = client.doCheckout(svnurl, checkoutDir, SVNRevision.HEAD,
                SVNRevision.HEAD, SVNDepth.UNKNOWN, true);
        println "Checked out at revision ${revision} in folder ${checkoutDir}"
    }
}

repositories {
    mavenCentral()
}


dependencies {
//    implementation "org.apache.derby:derby:${DERBY_VERSION}"
//    implementation "org.apache.derby:derbyclient:${DERBY_VERSION}"
    implementation files('local_repository/derby-10.15.2.1.jar', 'local_repository/derbyclient-10.15.2.1.jar')
}

tasks.register("svnCheckout", SvnCheckout) {
    branch = DERBY_MINOR
}

ant.lifecycleLogLevel = "INFO"

tasks.register("importAnt") {
    dependsOn svnCheckout

    doLast {
        ant.importBuild(layout.buildDirectory.file("${DERBY_MINOR}/build.xml").get().asFile) { antTargetName ->
            'ant-' + antTargetName
        }
        println "Ant imported"
    }
}

tasks.register("buildDerby") {
    dependsOn importAnt

    doLast {
        ant.antProject.setBasedir(layout.buildDirectory.dir(DERBY_MINOR).get().asFile.toString())
        ant.antProject.executeTarget("clobber")
        ant.antProject.executeTarget("buildsource")
        ant.antProject.executeTarget("buildjars")
    }
}

def readFullDerbyVersion(String derbyVersionBranch) {
    def releasePropertiesFile = layout.buildDirectory.file("${derbyVersionBranch}/tools/ant/properties/release.properties").get().asFile
    def props = new Properties()
    releasePropertiesFile.withInputStream { props.load(it) }

    return props.getProperty('release.id.long')
}

tasks.register('deployLocallyDerbyArtifacts') {
    dependsOn buildDerby
    description = "Copy Derby and Derby Client in local repository, which can be used to resolve dependencies"

    doLast {
        String derbyFullVersion = readFullDerbyVersion(DERBY_MINOR)
        copy {
            from layout.buildDirectory.dir("${DERBY_MINOR}/jars/sane/derby.jar")
            into file('local_repository/')
            rename 'derby.jar', "derby-${derbyFullVersion}.jar"
        }
        copy {
            from layout.buildDirectory.dir("${DERBY_MINOR}/jars/sane/derbyclient.jar")
            into file('local_repository/')
            rename 'derbyclient.jar', "derbyclient-${derbyFullVersion}.jar"
        }
    }
}

task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-integration-jdbc_jars.rb')
        jars_file.newWriter().withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            configurations.runtimeClasspath.allDependencies.each {
                w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
            }
        }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        configurations.runtimeClasspath.allDependencies.each { dep ->
	    File f = configurations.runtimeClasspath.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
            String groupPath = dep.group.replaceAll('\\.', '/')
            File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
            newJarFile.mkdirs()
            Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
        }
    }
}

vendor.dependsOn(generateGemJarRequiresFile)
